import psycopg2
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from datetime import datetime, date
from AI import generate_birthday_message  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –∏–º–ø–æ—Ä—Ç

def is_leap(year: int) -> bool:
    if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):
        return True
    return False

def handle_message(update, context):
    text = update.message.text
    user_id = update.effective_user.id
    if 'stage' not in context.user_data:
        context.user_data['stage'] = ''

    if context.user_data['stage'] == 'awaiting_user_context':
        user_context = text
        context.user_data['user_context'] = user_context
        context.user_data['stage'] = ''

        context.bot.send_message(chat_id=update.effective_chat.id, text='üßô‚Äç‚ôÇÔ∏è –ú—ã –∫–æ–ª–¥—É–µ–º –¥–ª—è –≤–∞—Å, –º–∏–Ω—É—Ç–∫–∞ —Ç–µ—Ä–ø–µ–Ω–∏—è ‚åõÔ∏è')

        message = generate_birthday_message(context.user_data['record_id'], user_id, user_context)
        context.user_data['previous_message'] = message
        keyboard = [
            [InlineKeyboardButton("‚úÖÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data='cancel')],
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data='edit')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        context.bot.send_message(chat_id=update.effective_chat.id, text=message if message else 'üßô‚Äç‚ôÇÔ∏è –°–µ—Ä–≤–∏—Å –≤–æ–ª—à–µ–±—Å—Ç–≤–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ ', reply_markup=reply_markup)
        return

    if context.user_data['stage'] == 'awaiting_birth_person':
        if len(text) > 100:
            keyboard = [[InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='start')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            context.bot.send_message(chat_id=update.effective_chat.id, text='–í–∞—à–µ –∏–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑',
                                     reply_markup=reply_markup)
        else:
            context.user_data['birth_person'] = text
            context.user_data['stage'] = 'awaiting_birth_age'
            keyboard = [[InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data='skip'),
                         InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='start')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            context.bot.send_message(chat_id=update.effective_chat.id, text='–í–≤–µ–¥–∏—Ç–µ –ì–û–î —Ä–æ–∂–¥–µ–Ω–∏—è',
                                     reply_markup=reply_markup)

    elif context.user_data['stage'] == 'awaiting_birth_age':
        if text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            context.user_data['birth_age'] = 1900
        elif text.isdigit() and 1901 <= int(text) <= datetime.now().year:
            context.user_data['birth_age'] = int(text)
        else:
            keyboard = [[InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='start')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            context.bot.send_message(
                chat_id=update.effective_chat.id,
                text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –æ—Ç 1901 –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞. –ü—Ä–∏–º–µ—Ä: 1991',
                reply_markup=reply_markup
            )
            return

        context.user_data['stage'] = 'awaiting_birth_month'
        context.user_data['is_leap'] = is_leap(context.user_data['birth_age'])

        keyboard = [
            [InlineKeyboardButton(m, callback_data=m) for m in ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç"]],
            [InlineKeyboardButton(m, callback_data=m) for m in ["–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å"]],
            [InlineKeyboardButton(m, callback_data=m) for m in ["–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å"]],
            [InlineKeyboardButton(m, callback_data=m) for m in ["–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"]],
            [InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='start')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        context.bot.send_message(chat_id=update.effective_chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –ú–ï–°–Ø–¶ —Ä–æ–∂–¥–µ–Ω–∏—è',
                                 reply_markup=reply_markup)

    elif context.user_data['stage'] == 'awaiting_birth_date':
        month_days = {
            '–ê–ø—Ä–µ–ª—å': 30, '–ò—é–Ω—å': 30, '–°–µ–Ω—Ç—è–±—Ä—å': 30, '–ù–æ—è–±—Ä—å': 30,
            '–Ø–Ω–≤–∞—Ä—å': 31, '–ú–∞—Ä—Ç': 31, '–ú–∞–π': 31, '–ò—é–ª—å': 31, '–ê–≤–≥—É—Å—Ç': 31, '–û–∫—Ç—è–±—Ä—å': 31, '–î–µ–∫–∞–±—Ä—å': 31
        }
        if context.user_data.get('birth_age') != 1900 and context.user_data.get('is_leap'):
            month_days['–§–µ–≤—Ä–∞–ª—å'] = 29
        else:
            month_days['–§–µ–≤—Ä–∞–ª—å'] = 28

        if not text.isdigit() or not 1 <= int(text) <= month_days[context.user_data['birth_month']]:
            keyboard = [[InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='start')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f'–í –≤—ã–±—Ä–∞–Ω–Ω–æ–º –º–µ—Å—è—Ü–µ {context.user_data["birth_month"]} {month_days[context.user_data["birth_month"]]} –¥–Ω–µ–π. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
                reply_markup=reply_markup
            )
        else:
            month_list = ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
                          "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"]

            birth_year = context.user_data.get('birth_age')
            birth_month = month_list.index(context.user_data.get('birth_month')) + 1
            birth_day = int(text)
            context.user_data['birth_date'] = date(birth_year, birth_month, birth_day)
            context.user_data['stage'] = 'awaiting_category'

            categories = [
                ("–î—Ä—É–∑—å—è üë¨", "–î—Ä—É–∑—å—è"),
                ("–†–∞–±–æ—Ç–∞ üíº", "–†–∞–±–æ—Ç–∞"),
                ("–£—á—ë–±–∞ üìö", "–£—á—ë–±–∞"),
                ("–†–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏ üë™", "–†–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏"),
                ("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ üë©‚Äçüè´", "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏"),
                ("–•–æ–±–±–∏ üé®", "–•–æ–±–±–∏"),
                ("–ó–Ω–∞–∫–æ–º—ã–µ üëã", "–ó–Ω–∞–∫–æ–º—ã–µ")
            ]
            keyboard = [
                [InlineKeyboardButton(categories[i][0], callback_data=categories[i][1]),
                 InlineKeyboardButton(categories[i+1][0], callback_data=categories[i+1][1])]
                for i in range(0, len(categories)-1, 2)
            ]
            if len(categories) % 2 == 1:
                keyboard.append([InlineKeyboardButton(categories[-1][0], callback_data=categories[-1][1]),
                                 InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data='-')])
            else:
                keyboard.append([InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data='-')])
            keyboard.append([InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='start')])
            reply_markup = InlineKeyboardMarkup(keyboard)
            context.bot.send_message(chat_id=update.effective_chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ª—É—á—à–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ —á–µ–ª–æ–≤–µ–∫–∞', reply_markup=reply_markup)
